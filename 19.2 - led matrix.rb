
gem 'ffi-wiring_pi'

require 'ffi/wiring_pi'

FFI::WiringPi::GPIO.setup
include FFI::WiringPi::GPIO
extend FFI::WiringPi::GPIO
define_method :get, &FFI::WiringPi::GPIO.method(:get)
define_method :write, &FFI::WiringPi::GPIO.method(:write)
define_method :read, &FFI::WiringPi::GPIO.method(:read)
define_method :analog_read, &FFI::WiringPi::GPIO.method(:analog_read)

$data_pin = 0
$latch_pin = 2
$clock_pin = 3

FFI::WiringPi::GPIO.set_pin_mode $data_pin, FFI::WiringPi::GPIO::OUTPUT
FFI::WiringPi::GPIO.set_pin_mode $latch_pin, FFI::WiringPi::GPIO::OUTPUT
FFI::WiringPi::GPIO.set_pin_mode $clock_pin, FFI::WiringPi::GPIO::OUTPUT

NUMBERS = [0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90]

PICTURE = [0x1c,0x22,0x51,0x45,0x45,0x51,0x22,0x1c]
DATA = [  # data of "0-F"
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # " "
 0x00, 0x00, 0x3E, 0x41, 0x41, 0x3E, 0x00, 0x00, # "0"
 0x00, 0x00, 0x21, 0x7F, 0x01, 0x00, 0x00, 0x00, # "1"
 0x00, 0x00, 0x23, 0x45, 0x49, 0x31, 0x00, 0x00, # "2"
 0x00, 0x00, 0x22, 0x49, 0x49, 0x36, 0x00, 0x00, # "3"
 0x00, 0x00, 0x0E, 0x32, 0x7F, 0x02, 0x00, 0x00, # "4"
 0x00, 0x00, 0x79, 0x49, 0x49, 0x46, 0x00, 0x00, # "5"
 0x00, 0x00, 0x3E, 0x49, 0x49, 0x26, 0x00, 0x00, # "6"
 0x00, 0x00, 0x60, 0x47, 0x48, 0x70, 0x00, 0x00, # "7"
 0x00, 0x00, 0x36, 0x49, 0x49, 0x36, 0x00, 0x00, # "8"
 0x00, 0x00, 0x32, 0x49, 0x49, 0x3E, 0x00, 0x00, # "9"
 0x00, 0x00, 0x3F, 0x44, 0x44, 0x3F, 0x00, 0x00, # "A"
 0x00, 0x00, 0x7F, 0x49, 0x49, 0x36, 0x00, 0x00, # "B"
 0x00, 0x00, 0x3E, 0x41, 0x41, 0x22, 0x00, 0x00, # "C"
 0x00, 0x00, 0x7F, 0x41, 0x41, 0x3E, 0x00, 0x00, # "D"
 0x00, 0x00, 0x7F, 0x49, 0x49, 0x41, 0x00, 0x00, # "E"
 0x00, 0x00, 0x7F, 0x48, 0x48, 0x40, 0x00, 0x00, # "F"
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # " "
]


def shift_out(data_pin, clock_pin, val)
  8.times do |i|
    j = 7 - i
   	write clock_pin, false
	  write data_pin, (val[j..j] == 1)#((val>>i) % 2 == 1)
    sleep 0.00001
    write clock_pin, true
    sleep 0.00001
  end
end

def push_data(data, data2)
  write $latch_pin, false
  shift_out $data_pin, $clock_pin, data
  shift_out $data_pin, $clock_pin, data2
  write $latch_pin, true
end

loop do
  500.times do |i|
    x = 0x80
    8.times do |j|
      push_data PICTURE[j], !x
      x >>= 1
      sleep 0.001
    end
  end

  18.times do |letter|
    x = 0x80
    8.times do |j|
      push_data DATA[letter*8 + j], !x
      x >>= 1
      sleep 0.001
    end
  end
end